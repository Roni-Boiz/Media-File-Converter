name: Script

on:
  workflow_dispatch:

jobs:
  install-docker:
    runs-on: [self-hosted, git-workflow]
    steps:
      - name: Check if Docker is already installed
        id: check-docker
        run: |
          if command -v docker &> /dev/null; then
            echo "Docker is already installed."
            echo "docker_installed=true" >> $GITHUB_ENV
          else
            echo "docker_installed=false" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Prevent Re-run if Docker is Installed
        if: env.docker_installed == 'true'
        run: exit 0

      - name: Install Docker
        if: env.docker_installed == 'false'
        run: |
          sudo apt-get update
          sudo apt-get install -y ca-certificates curl
          sudo install -m 0755 -d /etc/apt/keyrings
          sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
          sudo chmod a+r /etc/apt/keyrings/docker.asc
          echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
            $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
            sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update && sudo apt-get upgrade -y
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
          sudo systemctl start docker
          sudo systemctl enable docker
          sudo usermod -aG docker ubuntu
          newgrp docker
          sudo chmod 666 /var/run/docker.sock
          echo "docker_installed=true" >> $GITHUB_ENV
          echo "Docker installed successfully!"

      - name: Verify Docker Installation
        if: env.docker_installed == 'true'
        run: docker --version

  install-trivy:
    runs-on: [self-hosted, git-workflow]
    steps:
      - name: Check if Trivy is already installed
        id: check-trivy
        run: |
          if command -v trivy &> /dev/null; then
            echo "Trivy is already installed."
            echo "trivy_installed=true" >> $GITHUB_ENV
          else
            echo "trivy_installed=false" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Prevent Re-run if Trivy is Installed
        if: env.trivy_installed == 'true'
        run: exit 0

      - name: Install Trivy
        if: env.trivy_installed == 'false'
        run: |
          sudo apt-get install wget apt-transport-https gnupg lsb-release -y
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | gpg --dearmor | sudo tee /usr/share/keyrings/trivy.gpg > /dev/null
          echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update && sudo apt-get upgrade -y
          sudo apt-get install trivy -y
          echo "trivy_installed=true" >> $GITHUB_ENV
          echo "Trivy installed successfully!"

      - name: Verify Trivy Installation
        if: env.trivy_installed == 'true'
        run: trivy --version

  install-terraform:
    runs-on: [self-hosted, git-workflow]
    steps:
      - name: Check if Terraform is already installed
        id: check-terraform
        run: |
          if command -v terraform &> /dev/null; then
            echo "Terraform is already installed."
            echo "terraform_installed=true" >> $GITHUB_ENV
          else
            echo "terraform_installed=false" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Prevent Re-run if Terraform is Installed
        if: env.terraform_installed == 'true'
        run: exit 0

      - name: Install Terraform
        if: env.terraform_installed == 'false'
        run: |
          sudo apt-get update && sudo apt-get install -y gnupg software-properties-common
          wget -O- https://apt.releases.hashicorp.com/gpg | gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg > /dev/null
          gpg --no-default-keyring --keyring /usr/share/keyrings/hashicorp-archive-keyring.gpg --fingerprint
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt-get update && sudo apt-get upgrade -y
          sudo apt-get install terraform -y
          echo "terraform_installed=true" >> $GITHUB_ENV
          echo "Terraform installed successfully!"

      - name: Verify Terraform Installation
        if: env.terraform_installed == 'true'
        run: terraform --version

  install-aws-cli:
    runs-on: [self-hosted, git-workflow]
    steps:
      - name: Check if AWS-CLI is already installed
        id: check-aws-cli
        run: |
          if command -v aws &> /dev/null; then
            echo "AWS CLI is already installed."
            echo "aws_installed=true" >> $GITHUB_ENV
          else
            echo "aws_installed=false" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Prevent Re-run if AWS CLI is Installed
        if: env.aws_installed == 'true'
        run: exit 0

      - name: Install AWS CLI
        if: env.aws_installed == 'false'
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          sudo apt-get install unzip -y
          sudo unzip awscliv2.zip
          sudo ./aws/install
          sudo rm -rf aws
          echo "aws_installed=true" >> $GITHUB_ENV
          echo "AWS CLI installed successfully!"

      - name: Verify AWS CLI Installation
        if: env.aws_installed == 'true'
        run: aws --version

  install-minikube:
    runs-on: [self-hosted, git-workflow]
    steps:
      - name: Check if Minikube is already installed
        id: check-minikube
        run: |
          if command -v minikube &> /dev/null; then
            echo "minikube already installed."
            echo "minikube_installed=true" >> $GITHUB_ENV
          else
            echo "minikube_installed=false" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Prevent Re-run if Minikube is Installed
        if: env.minikube_installed == 'true'
        run: exit 0

      - name: Install Minikube
        if: env.minikube_installed == 'false'
        run: |
          curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          sudo install minikube-linux-amd64 /usr/local/bin/minikube && rm minikube-linux-amd64
          echo "minikube_installed=true" >> $GITHUB_ENV
          echo "Minikube installed successfully!"

      - name: Verify MinikubeInstallation
        if: env.minikube_installed == 'true'
        run: minikube version

  install-kubectl:
    runs-on: [self-hosted, git-workflow]
    steps:
      - name: Check if Kubectl is already installed
        id: check-kubectl
        run: |
          if command -v kubectl &> /dev/null; then
            echo "Kubectl is already installed."
            echo "kubectl_installed=true" >> $GITHUB_ENV
          else
            echo "kubectl_installed=false" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Prevent Re-run if Kubectl is Installed
        if: env.kubectl_installed == 'true'
        run: exit 0

      - name: Install Kubectl
        if: env.kubectl_installed == 'false'
        run: |
          sudo apt update
          sudo apt install curl -y
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl.sha256"
          echo "$(cat kubectl.sha256)  kubectl" | sha256sum --check
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
          echo "kubectl_installed=true" >> $GITHUB_ENV
          echo "Kubectl installed successfully!"

      - name: Verify Kubectl Installation
        if: env.kubectl_installed == 'true'
        run: kubectl version --client

  install-k9s:
    runs-on: [self-hosted, git-workflow]
    steps:
      - name: Check if K9s is already installed
        id: check-k9s
        run: |
          if command -v k9s &> /dev/null; then
            echo "K9s is already installed."
            echo "k9s_installed=true" >> $GITHUB_ENV
          else
            echo "k9s_installed=false" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Prevent Re-run if K9s is Installed
        if: env.k9s_installed == 'true'
        run: exit 0

      - name: Install K9s
        if: env.k9s_installed == 'false'
        run: |
          sudo apt install snapd
          sudo snap install k9s --channel=latest/stable
          echo "k9s_installed=true" >> $GITHUB_ENV
          echo "K9s installed successfully!"

      - name: Verify Kubectl Installation
        if: env.k9s_installed == 'true'
        run: k9s version

  install-python:
    runs-on: [self-hosted, git-workflow]
    steps:
      - name: Check if Python is already installed
        id: check-python
        run: |
          if command -v python3 &> /dev/null; then
            echo "Python is already installed."
            echo "python_installed=true" >> $GITHUB_ENV
          else
            echo "python_installed=false" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Prevent Re-run if Python is Installed
        if: env.python_installed == 'true'
        run: exit 0

      - name: Install Python
        if: env.python_installed == 'false'
        run: |
          sudo apt update
          sudo apt install python3.10 -y
          echo "python_installed=true" >> $GITHUB_ENV
          echo "Python installed successfully!"

      - name: Verify Python Installation
        if: env.python_installed == 'true'
        run: python3 --version

  install-mysql:
    runs-on: [self-hosted, git-workflow]
    steps:
      - name: Check if MySQL is already installed
        id: check-mysql
        run: |
          if command -v mysql &> /dev/null; then
            echo "MySQL is already installed."
            echo "mysql_installed=true" >> $GITHUB_ENV
          else
            echo "mysql_installed=false" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Prevent Re-run if MySQL is Installed
        if: env.mysql_installed == 'true'
        run: exit 0

      - name: Install MySQL
        if: env.mysql_installed == 'false'
        run: |
          sudo apt update
          sudo apt install mysql-server -y
          sudo systemctl start mysql.service
          echo "mysql_installed=true" >> $GITHUB_ENV
          echo "MySQL installed successfully!"

      - name: Verify MySQL Installation
        if: env.mysql_installed == 'true'
        run: mysql -V

  install-mongodb:
    runs-on: [self-hosted, git-workflow]
    steps:
      - name: Check if MongoDB is already installed
        id: check-mongo
        run: |
          if command -v mongod &> /dev/null; then
            echo "MongoDB is already installed."
            echo "mongo_installed=true" >> $GITHUB_ENV
          else
            echo "mongo_installed=false" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Prevent Re-run if MongoDB is Installed
        if: env.mongo_installed == 'true'
        run: exit 0

      - name: Install MongoDB
        if: env.mongo_installed == 'false'
        run: |
          sudo apt update
          sudo apt-get install -y gnupg curl
          curl -fsSL https://www.mongodb.org/static/pgp/server-7.0.asc | \
            sudo gpg -o /usr/share/keyrings/mongodb-server-7.0.gpg \
            --dearmor
          echo "deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-7.0.gpg ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/7.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list
          sudo apt-get update
          sudo apt-get install -y mongodb-org
          sudo systemctl start mongod
          echo "mongo_installed=true" >> $GITHUB_ENV
          echo "MongoDB installed successfully!"

      - name: Verify MongoDB Installation
        if: env.mongo_installed == 'true'
        run: mongod --version
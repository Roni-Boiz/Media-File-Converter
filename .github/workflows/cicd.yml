name: CI/CD Pipeline

on:
  workflow_dispatch:

jobs:
  setup:
    name: Setup
    runs-on: [self-hosted, git-workflow]
    steps:
      - name: Checkout Code
        id: checkout-code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup MySQL
        id: setup-mysql
        run: sudo mysql -u root < python/src/auth/init.sql

      - name: Setup Minikube
        id: setup-minikube
        run: |
          if [[ "$(minikube status --format "{{.Host}}")" == "Running" ]]; then
            echo "Minikube is already running."
          else
            nohup minikube start
            minikube addons enable ingress
          fi
        shell: bash

      - name: Read Minikube IP
        id: minikube-ip
        run: |
          MINIKUBE_IP=$(minikube ip)
          echo "MINIKUBE_IP=$MINIKUBE_IP" >> $GITHUB_ENV 
          echo "Minikube IP is $MINIKUBE_IP"

      - name: Setup Hosts
        id: setup-hosts
        run: |
          sudo awk -v minikube_ip="$MINIKUBE_IP" '
            BEGIN {
              # Define the desired entries for Minikube
              minikube_entries["kubernetes-mp3converter.com"] = 1
              minikube_entries["kubernetes-rabbitmq-manager.com"] = 1

              # Define the additional entries
              additional_entries["127.0.0.1"] = "kubernetes.docker.internal host.minikube.internal"
            }
            {
              # Print existing lines as they are
              print
              
              # Check if an entry exists and mark it as found
              if ($1 == minikube_ip && ($2 in minikube_entries)) {
                delete minikube_entries[$2]
              }

              # Check for additional entries
              if ($1 in additional_entries) {
                split(additional_entries[$1], names, " ")
                for (i in names) {
                  if ($2 == names[i]) {
                    delete additional_entries[$1]
                  }
                }
              }
            }
            END {
              # Add missing Minikube entries
              for (entry in minikube_entries) {
                print minikube_ip, entry
              }
              
              # Add additional entries if missing
              for (ip in additional_entries) {
                split(additional_entries[ip], names, " ")
                for (name in names) {
                  print ip, names[name]
                }
              }
            }
          ' /etc/hosts > /tmp/hosts.tmp && sudo mv /tmp/hosts.tmp /etc/hosts

      - name: Setup Binds
        id: setup-binds
        run: |
          CONFIG_FILE="/etc/mysql/mysql.conf.d/mysqld.cnf"
          sudo sed -i 's/^[[:space:]]*bind-address[[:space:]]*=[[:space:]]*.*$/bind-address = 0.0.0.0/' $CONFIG_FILE
          sudo sed -i 's/^[[:space:]]*mysqlx-bind-address[[:space:]]*=[[:space:]]*.*$/mysqlx-bind-address = 0.0.0.0/' $CONFIG_FILE

  build:
    name: Build
    needs: Setup
    runs-on: [self-hosted, git-workflow]
    steps:
      - name: Checkout Code
        id: checkout-code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Build and Analyze with SonarQube
        id: sonarqube-analyze
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: Trivy File Scan
        id: trivy-file-scan
        run: |
          trivy fs . > trivyfs.txt
          cat trivyfs.txt

      - name: Docker Build
        id: docker-build
        run: |
          docker build -f python/src/auth/Dockerfile -t media-auth:latest python/src/auth/
          docker build -f python/src/converter/Dockerfile -t media-converter:latest python/src/converter/
          docker build -f python/src/gateway/Dockerfile -t media-gateway:latest python/src/gateway/
          docker build -f python/src/notification/Dockerfile -t media-notification:latest python/src/notification/
        env:
          DOCKER_CLI_ACI: 1

      - name: Docker Push
        id: docker-push
        run: |
          docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}

          docker tag media-auth:latest ${{ secrets.DOCKERHUB_USERNAME }}/media-auth:latest
          docker tag media-converter:latest ${{ secrets.DOCKERHUB_USERNAME }}/media-converter:latest
          docker tag media-gateway:latest ${{ secrets.DOCKERHUB_USERNAME }}/media-gateway:latest
          docker tag media-notification:latest ${{ secrets.DOCKERHUB_USERNAME }}/media-notification:latest
          
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/media-auth:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/media-converter:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/media-gateway:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/media-notification:latest
        env:
          DOCKER_CLI_ACI: 1
    
      - name: Prune Dangling Docker Images
        id: prune-dangling-images
        run: docker images -f "dangling=true" -q | xargs -r docker rmi

  deploy:
    name: Deploy
    needs: Build 
    runs-on: [self-hosted, git-workflow]
    steps:
      - name: Docker Pull
        id: docker-pull
        run: |
          docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
          
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/media-auth:latest
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/media-converter:latest
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/media-gateway:latest
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/media-notification:latest

      - name: Trivy Image scan
        id: trivy-image-scan
        run: |
          trivy image ${{ secrets.DOCKERHUB_USERNAME }}/media-auth:latest
          trivy image ${{ secrets.DOCKERHUB_USERNAME }}/media-converter:latest
          trivy image ${{ secrets.DOCKERHUB_USERNAME }}/media-gateway:latest
          trivy image ${{ secrets.DOCKERHUB_USERNAME }}/media-notification:latest

      - name: Deploy to Kubernetes
        id: deploy-to-k8s
        run: |
          kubectl apply -f python/src/rabbit/manifests/
          kubectl apply -f python/src/converter/manifests/
          kubectl apply -f python/src/notification/manifests/
          kubectl apply -f python/src/auth/manifests/
          kubectl apply -f python/src/gateway/manifests/

      - name: Verify The Status
        id: k8s-status
        run: kubectl get all

      - name: Start Tunnel
        id: start-tunnel
        run: |
          if [[ "$(minikube status --format "{{.Host}}")" == "Running" ]]; then
            nohup minikube tunnel &
          fi
        shell: bash